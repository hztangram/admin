{"version":3,"file":"static/js/758.3603fe65.chunk.js","mappings":"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","sources":["components/UserTable.js","views/users/TangramUsers.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { alpha } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport TableSortLabel from '@mui/material/TableSortLabel';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport Checkbox from '@mui/material/Checkbox';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Switch from '@mui/material/Switch';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport FilterListIcon from '@mui/icons-material/FilterList';\nimport { visuallyHidden } from '@mui/utils';\n\nfunction createData(id, email, checkAds, page, language, date) {\n    return {\n        id,\n        email,\n        checkAds,\n        page,\n        language,\n        date\n    };\n}\n\nconst rows = [\n    createData(1, 'test1@naver.com', 'Y', 'main', 'kr', '2022.01.01'),\n    createData(2, 'test20@naver.com', 'Y', 'main', 'kr', '2022.12.01'),\n    createData(5, 'tete1@gmail.com', 'Y', 'smartrope', 'kr', '2022.11.01'),\n    createData(6, 'test1@naver.com', 'Y', 'main', 'kr', '2022.01.01'),\n    createData(8, 'test20@naver.com', 'Y', 'main', 'kr', '2022.12.01'),\n    createData(10, 'tete1@gmail.com', 'Y', 'smartrope', 'kr', '2022.11.01'),\n    createData(11, 'test1@naver.com', 'Y', 'main', 'kr', '2022.01.01'),\n    createData(12, 'test20@naver.com', 'Y', 'main', 'kr', '2022.12.01'),\n    createData(15, 'tete1@gmail.com', 'Y', 'smartrope', 'kr', '2022.11.01'),\n    createData(16, 'test1@naver.com', 'Y', 'main', 'kr', '2022.01.01'),\n    createData(18, 'test20@naver.com', 'Y', 'main', 'kr', '2022.12.01'),\n    createData(20, 'tete1@gmail.com', 'N', 'smartrope', 'kr', '2022.11.01'),\n    createData(30, 'tete1@gmail.com', 'Y', 'smartrope', 'kr', '2022.11.01'),\n    createData(31, 'test1@naver.com', 'N', 'main', 'kr', '2022.01.01'),\n    createData(32, 'test20@naver.com', 'N', 'main', 'kr', '2022.12.01'),\n    createData(35, 'tete1@gmail.com', 'N', 'smartrope', 'kr', '2022.11.01'),\n    createData(46, 'test1@naver.com', 'Y', 'main', 'kr', '2022.01.01'),\n    createData(48, 'test20@naver.com', 'Y', 'main', 'kr', '2022.12.01'),\n    createData(50, 'tete1@gmail.com', 'Y', 'smartrope', 'kr', '2022.11.01')\n];\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\n// This method is created for cross-browser compatibility, if you don't\n// need to support IE11, you can use Array.prototype.sort() directly\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) {\n            return order;\n        }\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n    {\n        id: 'id',\n        format: (value) => Number(value),\n        disablePadding: true,\n        align: 'center',\n        label: 'ID'\n    },\n    {\n        id: 'email',\n        disablePadding: false,\n        align: 'center',\n        label: 'Email'\n    },\n    {\n        id: 'checkAds',\n        disablePadding: false,\n        label: 'CheckAds'\n    },\n    {\n        id: 'page',\n        disablePadding: false,\n        label: 'Page'\n    },\n    {\n        id: 'language',\n        disablePadding: false,\n        label: 'Language'\n    },\n    {\n        id: 'date',\n        disablePadding: false,\n        label: 'Date'\n    }\n];\n\nfunction EnhancedTableHead(props) {\n    const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        color=\"primary\"\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={numSelected > 0 && numSelected === numSelected}\n                        onChange={onSelectAllClick}\n                        inputProps={{\n                            'aria-label': 'select all desserts'\n                        }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={'left'}\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <Box component=\"span\" sx={visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </Box>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired\n};\n\nconst EnhancedTableToolbar = (props) => {\n    const { numSelected } = props;\n\n    return (\n        <Toolbar\n            sx={{\n                pl: { sm: 2 },\n                pr: { xs: 1, sm: 1 },\n                ...(numSelected > 0 && {\n                    bgcolor: (theme) => alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity)\n                })\n            }}\n        >\n            {numSelected > 0 ? (\n                <Typography sx={{ flex: '1 1 100%' }} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n                    {numSelected} selected\n                </Typography>\n            ) : (\n                <Typography sx={{ flex: '1 1 100%' }} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Nutrition\n                </Typography>\n            )}\n\n            {numSelected > 0 ? (\n                <Tooltip title=\"Delete\">\n                    <IconButton>\n                        <DeleteIcon />\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <Tooltip title=\"Filter list\">\n                    <IconButton>\n                        <FilterListIcon />\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired\n};\n\nexport default function EnhancedTable() {\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    // const handleSelectAllClick = (event) => {\n    //     if (event.target.checked) {\n    //         const newSelected = rows.map((n) => n.id);\n    //         setSelected(newSelected);\n    //         return;\n    //     }\n    //     setSelected([]);\n    // };\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((n) => n.id);\n\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, id) => {\n        const selectedIndex = selected.indexOf(id);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, id);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n        setSelected([]);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = (id) => selected.indexOf(id) !== -1;\n\n    // Avoid a layout jump when reaching the last page with empty rows.\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n    return (\n        <Box sx={{ width: '100%' }}>\n            <Paper sx={{ width: '100%', mb: 2 }}>\n                <EnhancedTableToolbar numSelected={selected.length} />\n                <TableContainer>\n                    <Table sx={{ minWidth: 750 }} aria-labelledby=\"tableTitle\" size={'medium'}>\n                        <EnhancedTableHead\n                            numSelected={selected.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onSelectAllClick={handleSelectAllClick}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rowsPerPage}\n                        />\n                        <TableBody>\n                            {/* if you don't need to support IE11, you can replace the `stableSort` call with:\n                 rows.slice().sort(getComparator(order, orderBy)) */}\n                            {stableSort(rows, getComparator(order, orderBy))\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map((row, index) => {\n                                    const isItemSelected = isSelected(row.id);\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                                    return (\n                                        <TableRow\n                                            hover\n                                            onClick={(event) => handleClick(event, row.id)}\n                                            role=\"checkbox\"\n                                            aria-checked={isItemSelected}\n                                            tabIndex={-1}\n                                            key={row.id}\n                                            selected={isItemSelected}\n                                        >\n                                            <TableCell padding=\"checkbox\">\n                                                <Checkbox\n                                                    color=\"primary\"\n                                                    checked={isItemSelected}\n                                                    inputProps={{\n                                                        'aria-labelledby': labelId\n                                                    }}\n                                                />\n                                            </TableCell>\n                                            <TableCell component=\"th\" id={row.id} scope=\"row\" padding=\"none\" align=\"left\">\n                                                {row.id}\n                                            </TableCell>\n                                            <TableCell align=\"left\">{row.email}</TableCell>\n                                            <TableCell align=\"left\">{row.checkAds}</TableCell>\n                                            <TableCell align=\"left\">{row.page}</TableCell>\n                                            <TableCell align=\"left\">{row.language}</TableCell>\n                                            <TableCell align=\"left\">{row.date}</TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onPageChange={handleChangePage}\n                    onRowsPerPageChange={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </Box>\n    );\n}\n","// material-ui\nimport { Typography } from '@mui/material';\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard';\nimport UserTable from '../../components/UserTable';\n\n// ==============================|| SAMPLE PAGE ||============================== //\n\nconst SamplePage = () => (\n    <MainCard title=\"Sample Card\">\n        <UserTable />\n        <Typography variant=\"body2\">dsfdsfdsf</Typography>\n    </MainCard>\n);\n\nexport default SamplePage;\n"],"names":["createData","id","email","checkAds","page","language","date","rows","descendingComparator","a","b","orderBy","getComparator","order","stableSort","array","comparator","stabilizedThis","map","el","index","sort","headCells","format","value","Number","disablePadding","align","label","EnhancedTableHead","props","onSelectAllClick","numSelected","rowCount","onRequestSort","TableHead","TableRow","TableCell","padding","Checkbox","color","indeterminate","checked","onChange","inputProps","headCell","sortDirection","TableSortLabel","active","direction","onClick","property","event","Box","component","sx","visuallyHidden","EnhancedTableToolbar","Toolbar","pl","sm","pr","xs","bgcolor","theme","alpha","palette","primary","main","action","activatedOpacity","Typography","flex","variant","Tooltip","title","IconButton","Delete","FilterList","EnhancedTable","setOrder","React","setOrderBy","selected","setSelected","setPage","rowsPerPage","setRowsPerPage","Math","max","length","width","Paper","mb","TableContainer","Table","minWidth","size","target","newSelecteds","slice","n","TableBody","row","isItemSelected","indexOf","labelId","hover","selectedIndex","newSelected","concat","handleClick","role","tabIndex","scope","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt","MainCard"],"sourceRoot":""}