{"version":3,"file":"static/js/758.af49b052.chunk.js","mappings":"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","sources":["components/UserTable.js","views/users/TangramUsers.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport Checkbox from '@mui/material/Checkbox';\nimport InputLabel from '@mui/material/InputLabel';\nimport EditIcon from '@mui/icons-material/Edit';\nimport SaveIcon from '@mui/icons-material/Save';\nimport FormControl from '@mui/material/FormControl';\nimport NativeSelect from '@mui/material/NativeSelect';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Switch from '@mui/material/Switch';\nimport Box from '@mui/material/Box';\nimport Input from '@mui/material/Input';\n\nimport {\n    getUsers,\n    toggleEdit,\n    updateUsers,\n    cleanData,\n    verifyEmail,\n    setRefresh,\n    deleteUsers,\n    checkAll,\n    selectUpdate,\n    toggleCheck,\n    setSaveMode,\n    setBatch\n} from '../store/emailSubscribeUsers';\nimport Button from '@mui/material/Button';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport SendIcon from '@mui/icons-material/Send';\nimport CloseIcon from '@mui/icons-material/Close';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport Pagination from '@mui/material/Pagination';\nimport Stack from '@mui/material/Stack';\n\nexport default function BasicTable() {\n    const dispatch = useDispatch();\n    const refresh = useSelector((state) => state.emailSubscribeUsers.refresh);\n    const users = useSelector((state) => state.emailSubscribeUsers.users);\n    const saveMode = useSelector((state) => state.emailSubscribeUsers.saveMode);\n    const currentPage = useSelector((state) => state.emailSubscribeUsers.currentPage);\n    const pageSize = useSelector((state) => state.emailSubscribeUsers.pageSize);\n    const total = useSelector((state) => state.emailSubscribeUsers.total);\n    const count = Math.floor(total / pageSize) + 1;\n    const batchMode = useSelector((state) => state.emailSubscribeUsers.batchMode);\n    const checkedAll = useSelector((state) => state.emailSubscribeUsers.checkedAll);\n\n    useEffect(() => {\n        const page = document.querySelector('[aria-current=\"true\"]').innerText;\n        dispatch(getUsers({ currentPage: pageSize * (page - 1) }));\n        refresh && dispatch(setRefresh());\n    }, [refresh]);\n\n    useEffect(() => {\n        dispatch(cleanData());\n    }, [batchMode]);\n\n    const deleteHandler = () => {\n        let deleteArr = [];\n        users.map((a) => a.checked && deleteArr.push(Number(a.id)));\n        dispatch(deleteUsers({ deleteArr })).then((res) => {\n            if (res.payload.status === 200 && res.payload.data.success) {\n                dispatch(cleanData());\n            }\n        });\n    };\n    const updateHandler = () => {\n        //개별수정모드\n        let rowArr = Array.from(document.querySelectorAll('[data-update=\"true\"]'));\n        let resultData = rowArr.map((data) => {\n            let id = Number(data.getAttribute('data-key'));\n            let email = data.querySelector('[name=\"email\"]').value;\n            let page = data.querySelector('[name=\"page\"]').value;\n            let lang = data.querySelector('[name=\"lang\"]').value;\n            let adAgree = Number(data.querySelector('[name=\"adAgree\"]').value);\n            let deleted = Number(data.querySelector('[name=\"deleted\"]').value);\n\n            return {\n                id: id,\n                email: email,\n                page: page,\n                lang: lang,\n                adAgree: adAgree,\n                deleted: deleted\n            };\n        });\n\n        let invalidEamil = [];\n        rowArr.map((row) => {\n            let value = row.querySelector('[name=\"email\"]').value;\n            let id = row.getAttribute('data-key');\n            var reg = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n            reg.test(value) === false && invalidEamil.push(id);\n        });\n\n        if (invalidEamil.length > 0) {\n            dispatch(verifyEmail({ invalidEamil }));\n        } else if (saveMode && invalidEamil.length <= 0) {\n            dispatch(updateUsers({ resultData }))\n                .then((res) => {\n                    if (res.payload.status === 200 && res.payload.data.success) {\n                        dispatch(cleanData());\n                    }\n                })\n                .catch((error) => {\n                    console.error(error);\n                });\n        }\n    };\n    const updateBatchHandler = () => {\n        let rowArr = Array.from(document.querySelectorAll('[data-update=\"true\"]'));\n\n        let resultData = rowArr.map((data) => {\n            let id = Number(data.getAttribute('data-key'));\n            let email = data.querySelector('[name=\"email\"]').value;\n            let page = document.querySelector('[name=\"batchPage\"]').value;\n            let lang = document.querySelector('[name=\"batchLang\"]').value;\n            let adAgree = Number(document.querySelector('[name=\"batchAdAgree\"]').value);\n            let deleted = Number(data.querySelector('[name=\"deleted\"]').value);\n            return {\n                id: id,\n                email: email,\n                page: page,\n                lang: lang,\n                adAgree: adAgree,\n                deleted: deleted\n            };\n        });\n        dispatch(updateUsers({ resultData }))\n            .then((res) => {\n                if (res.payload.status === 200 && res.payload.data.success) {\n                    dispatch(cleanData());\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n            });\n    };\n\n    //checkbox\n\n    const _main = 'TANGRAM Main';\n    const _smartrope = 'SmartRope LED';\n    const _smartroperookie = 'SmartRope ROOKIE';\n    const _smartropepure = 'SmartRope PURE';\n    const _shop = 'TANGRAM SHOP';\n\n    const _kr = 'KR';\n    const _en = 'EN';\n    const _jp = 'JP';\n    const _cn = 'CN';\n    const _de = 'DE';\n    const _fr = 'FR';\n\n    return (\n        <>\n            <Box\n                sx={{\n                    display: 'flex',\n                    alignItems: 'flex-start',\n                    justifyContent: 'space-between',\n\n                    height: '42px'\n                }}\n            >\n                <Box>\n                    <FormGroup>\n                        <FormControlLabel\n                            control={<Switch onChange={() => dispatch(setBatch())} />}\n                            label={batchMode ? '일괄수정모드 끄기' : '일괄수정모드 켜기'}\n                        />\n                    </FormGroup>\n                </Box>\n                <Box>\n                    {batchMode && (\n                        <>\n                            <FormControl sx={{ mr: 2, minWidth: 170 }} size=\"small\" disabled={!saveMode}>\n                                <InputLabel>Page</InputLabel>\n                                <Select label=\"Page\" defaultValue=\"main\" name=\"batchPage\">\n                                    <MenuItem value=\"main\">TANGRAM Main</MenuItem>\n                                    <MenuItem value=\"smartrope\">SmartRope LED</MenuItem>\n                                    <MenuItem value=\"smartroperookie\">SmartRope ROOKIE</MenuItem>\n                                    <MenuItem value=\"smartropepure\">SmartRope PURE</MenuItem>\n                                    <MenuItem value=\"shop\">TANGRAM SHOP</MenuItem>\n                                </Select>\n                            </FormControl>\n                            <FormControl sx={{ mr: 2, minWidth: 170 }} size=\"small\" disabled={!saveMode}>\n                                <InputLabel>Language</InputLabel>\n                                <Select label=\"Language\" defaultValue=\"kr\" name=\"batchLang\">\n                                    <MenuItem value=\"kr\">KR</MenuItem>\n                                    <MenuItem value=\"en\">EN</MenuItem>\n                                    <MenuItem value=\"jp\">JP</MenuItem>\n                                    <MenuItem value=\"cn\">CN</MenuItem>\n                                    <MenuItem value=\"de\">DE</MenuItem>\n                                    <MenuItem value=\"fr\">FR</MenuItem>\n                                </Select>\n                            </FormControl>\n                            <FormControl sx={{ mr: 2, minWidth: 170 }} size=\"small\" disabled={!saveMode}>\n                                <InputLabel>Ad Agree </InputLabel>\n                                <Select label=\"Ad Agree\" defaultValue=\"1\" name=\"batchAdAgree\">\n                                    <MenuItem value=\"1\">Agree</MenuItem>\n                                    <MenuItem value=\"0\">Disagree</MenuItem>\n                                </Select>\n                            </FormControl>\n                            <Button\n                                variant=\"outlined\"\n                                startIcon={<DeleteIcon />}\n                                sx={{ mr: 2 }}\n                                color=\"error\"\n                                disabled={!saveMode}\n                                onClick={deleteHandler}\n                            >\n                                Delete\n                            </Button>\n                        </>\n                    )}\n                    <Button\n                        variant=\"contained\"\n                        endIcon={<SendIcon />}\n                        disabled={!saveMode}\n                        onClick={batchMode ? updateBatchHandler : updateHandler}\n                    >\n                        Save\n                    </Button>\n                </Box>\n            </Box>\n\n            <TableContainer component={Paper}>\n                <Table sx={{ minWidth: 650 }} stickyHeader className=\"fixed-table\">\n                    <colgroup>\n                        {batchMode ? (\n                            <>\n                                <col style={{ width: '1%' }} />\n                                <col style={{ width: '5%' }} />\n                                <col style={{ width: '16%' }} />\n                                <col style={{ width: '16%' }} />\n                                <col style={{ width: '15%' }} />\n                                <col style={{ width: '15%' }} />\n                                <col style={{ width: '16%' }} />\n                                <col style={{ width: '16%' }} />\n                            </>\n                        ) : (\n                            <>\n                                <col style={{ width: '5%' }} />\n                                <col style={{ width: '16%' }} />\n                                <col style={{ width: '16%' }} />\n                                <col style={{ width: '15%' }} />\n                                <col style={{ width: '15%' }} />\n                                <col style={{ width: '16%' }} />\n                                <col style={{ width: '16%' }} />\n                                <col style={{ width: '1%' }} />\n                            </>\n                        )}\n                    </colgroup>\n                    <TableHead>\n                        <TableRow>\n                            {batchMode && (\n                                <TableCell padding=\"checkbox\">\n                                    <Checkbox color=\"primary\" onClick={() => dispatch(checkAll())} checked={checkedAll} />\n                                </TableCell>\n                            )}\n                            <TableCell align=\"left\">ID</TableCell>\n                            <TableCell align=\"left\">Email</TableCell>\n                            <TableCell align=\"left\">Page</TableCell>\n                            <TableCell align=\"left\">Language</TableCell>\n                            <TableCell align=\"left\">Ad Agree</TableCell>\n                            <TableCell align=\"left\">Created Date</TableCell>\n                            <TableCell align=\"left\">Modified Date</TableCell>\n                            {!batchMode && <TableCell align=\"center\">Edit</TableCell>}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {users &&\n                            users.map((user) =>\n                                user.edit ? (\n                                    <TableRow\n                                        key={user.id}\n                                        data-key={user.id}\n                                        sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                                        name=\"row\"\n                                        data-edit={user.edit}\n                                        data-update={user.isUpdate}\n                                    >\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {user.id}\n                                        </TableCell>\n                                        <TableCell align=\"left\">\n                                            <TextField\n                                                fullWidth\n                                                error={user.verified ? false : true}\n                                                defaultValue={user.email}\n                                                helperText={!user.verified && '이메일을 올바른 형식으로 작성해주세요.'}\n                                                variant=\"standard\"\n                                                name=\"email\"\n                                                onChange={() => dispatch(setSaveMode(user.id))}\n                                            />\n                                        </TableCell>\n                                        <TableCell align=\"left\">\n                                            <Select\n                                                fullWidth\n                                                variant=\"standard\"\n                                                defaultValue={user.page}\n                                                name=\"page\"\n                                                onChange={() => dispatch(setSaveMode(user.id))}\n                                            >\n                                                <MenuItem value=\"main\">TANGRAM Main</MenuItem>\n                                                <MenuItem value=\"smartrope\">SmartRope LED</MenuItem>\n                                                <MenuItem value=\"smartroperookie\">SmartRope ROOKIE</MenuItem>\n                                                <MenuItem value=\"smartropepure\">SmartRope PURE</MenuItem>\n                                                <MenuItem value=\"shop\">TANGRAM SHOP</MenuItem>\n                                            </Select>\n                                        </TableCell>\n                                        <TableCell align=\"left\">\n                                            <Select\n                                                variant=\"standard\"\n                                                fullWidth\n                                                defaultValue={user.lang}\n                                                name=\"lang\"\n                                                onChange={() => dispatch(setSaveMode(user.id))}\n                                            >\n                                                <MenuItem value=\"kr\">KR</MenuItem>\n                                                <MenuItem value=\"en\">EN</MenuItem>\n                                                <MenuItem value=\"jp\">JP</MenuItem>\n                                                <MenuItem value=\"cn\">CN</MenuItem>\n                                                <MenuItem value=\"de\">DE</MenuItem>\n                                                <MenuItem value=\"fr\">FR</MenuItem>\n                                            </Select>\n                                        </TableCell>\n                                        <TableCell align=\"left\">\n                                            <Select\n                                                variant=\"standard\"\n                                                fullWidth\n                                                defaultValue={user.adAgree}\n                                                name=\"adAgree\"\n                                                onChange={() => dispatch(setSaveMode(user.id))}\n                                            >\n                                                <MenuItem value=\"1\">Agree</MenuItem>\n                                                <MenuItem value=\"0\">Disagree</MenuItem>\n                                            </Select>\n                                        </TableCell>\n                                        <TableCell align=\"left\" className=\"hidden\">\n                                            <Select\n                                                variant=\"standard\"\n                                                fullWidth\n                                                defaultValue={user.deleted}\n                                                name=\"deleted\"\n                                                onChange={() => dispatch(setSaveMode(user.id))}\n                                            >\n                                                <MenuItem value=\"1\">undeleted</MenuItem>\n                                                <MenuItem value=\"0\">deleted</MenuItem>\n                                            </Select>\n                                        </TableCell>\n                                        <TableCell align=\"left\">{user.created}</TableCell>\n                                        <TableCell align=\"left\">{user.modified}</TableCell>\n                                        <TableCell align=\"center\">\n                                            <Button onClick={() => dispatch(toggleEdit(user.id))}>\n                                                <CloseIcon className=\"secondary\" />\n                                            </Button>\n                                        </TableCell>\n                                    </TableRow>\n                                ) : (\n                                    <TableRow\n                                        key={user.id}\n                                        data-key={user.id}\n                                        sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                                        name=\"row\"\n                                        data-edit={user.edit}\n                                        data-update={user.isUpdate}\n                                    >\n                                        {batchMode && (\n                                            <TableCell padding=\"checkbox\">\n                                                <Checkbox\n                                                    color=\"primary\"\n                                                    name=\"checkbox\"\n                                                    onChange={(e) => dispatch(toggleCheck({ id: user.id, checked: e.target.checked }))}\n                                                    checked={user.checked}\n                                                />\n                                            </TableCell>\n                                        )}\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {user.id}\n                                        </TableCell>\n                                        <TableCell align=\"left\">\n                                            <input value={user.email} name=\"email\" className=\"customInput\" disabled />\n                                        </TableCell>\n                                        <TableCell align=\"left\">\n                                            <input\n                                                value={\n                                                    (user.page === 'main' && _main) ||\n                                                    (user.page === 'smartrope' && _smartrope) ||\n                                                    (user.page === 'smartroperookie' && _smartroperookie) ||\n                                                    (user.page === 'smartropepure' && _smartropepure) ||\n                                                    (user.page === 'shop' && _shop)\n                                                }\n                                                name=\"page\"\n                                                className=\"customInput\"\n                                                disabled\n                                            />\n                                        </TableCell>\n                                        <TableCell align=\"left\">\n                                            <input\n                                                value={\n                                                    (user.lang === 'kr' && _kr) ||\n                                                    (user.lang === 'en' && _en) ||\n                                                    (user.lang === 'jp' && _jp) ||\n                                                    (user.lang === 'cn' && _cn) ||\n                                                    (user.lang === 'de' && _de) ||\n                                                    (user.lang === 'fr' && _fr)\n                                                }\n                                                name=\"lang\"\n                                                className=\"customInput\"\n                                                disabled\n                                            />\n                                        </TableCell>\n                                        <TableCell align=\"left\">\n                                            <select value={user.adAgree} name=\"adAgree\" className=\"customSelect\" disabled>\n                                                <option value=\"1\">Agree</option>\n                                                <option value=\"0\">Disagree</option>\n                                            </select>\n                                        </TableCell>\n                                        <TableCell align=\"left\" className=\"hidden\">\n                                            <input value={user.deleted} name=\"deleted\" className=\"customInput\" disabled />\n                                        </TableCell>\n                                        <TableCell align=\"left\">{user.created}</TableCell>\n                                        <TableCell align=\"left\">{user.modified}</TableCell>\n                                        {!batchMode && (\n                                            <TableCell align=\"center\">\n                                                <Button onClick={() => dispatch(toggleEdit(user.id))}>\n                                                    <EditIcon color=\"primary\" />\n                                                </Button>\n                                            </TableCell>\n                                        )}\n                                    </TableRow>\n                                )\n                            )}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <Grid container direction=\"row\" justifyContent=\"center\" alignItems=\"center\" sx={{ mt: 5 }}>\n                <Stack spacing={2}>\n                    <Pagination\n                        count={count}\n                        showFirstButton\n                        showLastButton\n                        onChange={(_, page) => dispatch(getUsers({ currentPage: pageSize * (page - 1) }))}\n                    />\n                </Stack>\n            </Grid>\n        </>\n    );\n}\n","// material-ui\nimport { Typography } from '@mui/material';\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard';\n// import UserTable from '../../components/UserTable';\nimport User from '../../components/UserTable';\n\n// ==============================|| SAMPLE PAGE ||============================== //\n\nconst TangramUsers = () => (\n    <MainCard title=\"Tangram\">\n        <User />\n    </MainCard>\n);\n\nexport default TangramUsers;\n"],"names":["BasicTable","dispatch","useDispatch","refresh","useSelector","state","emailSubscribeUsers","users","saveMode","pageSize","currentPage","total","count","Math","floor","batchMode","checkedAll","useEffect","page","document","querySelector","innerText","getUsers","setRefresh","cleanData","Box","sx","display","alignItems","justifyContent","height","FormGroup","FormControlLabel","control","Switch","onChange","setBatch","label","FormControl","mr","minWidth","size","disabled","InputLabel","Select","defaultValue","name","MenuItem","value","Button","variant","startIcon","Delete","color","onClick","deleteArr","map","a","checked","push","Number","id","deleteUsers","then","res","payload","status","data","success","endIcon","Send","resultData","Array","from","querySelectorAll","getAttribute","email","lang","adAgree","deleted","updateUsers","catch","error","console","rowArr","invalidEamil","row","test","length","verifyEmail","TableContainer","component","Paper","Table","stickyHeader","className","style","width","TableHead","TableRow","TableCell","padding","Checkbox","checkAll","align","TableBody","user","edit","border","isUpdate","scope","TextField","fullWidth","verified","helperText","setSaveMode","created","modified","toggleEdit","Close","e","toggleCheck","target","Edit","Grid","container","direction","mt","Stack","spacing","Pagination","showFirstButton","showLastButton","_","MainCard","title"],"sourceRoot":""}